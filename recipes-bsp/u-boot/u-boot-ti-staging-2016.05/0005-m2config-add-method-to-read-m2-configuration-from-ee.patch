From e8533d38ad58796e8e66dba5b253d0a69844bd3b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Urs=20F=C3=A4ssler?= <urs.fassler@bytesatwork.ch>
Date: Thu, 25 Jun 2015 10:51:29 +0200
Subject: [PATCH 05/14] m2config: add method to read m2 configuration from
 eeprom and commands to manipulate
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Configuration options:

CONFIG_CMD_M2CONFIG
If defined, add the u-boot command m2config to read and write the configuration.

CONFIG_M2CONFIG_EEPROM
If defined, add method to read (SPL) and write (SPL and u-boot) the
configuration from the eeprom.

CONFIG_M2CONFIG_BUILTIN
If defined, add built-in configuration values. Define the following names:
  CONFIG_M2CONFIG_BUILTIN_PCB
  CONFIG_M2CONFIG_BUILTIN_RAM
  CONFIG_M2CONFIG_BUILTIN_FLASH

If both CONFIG_M2CONFIG_EEPROM and CONFIG_M2CONFIG_BUILTIN are defined, the
order is defined in m2config_get.

At least one of CONFIG_M2CONFIG_EEPROM or CONFIG_M2CONFIG_BUILTIN has to be
defined.

EEPROM format

Byte order is the native byte order of the CPU. The format is:

Bytes  Usage
  2    Magic
  2    length
  4    PCB
  4    RAM
  4    Flash
  4    CRC

Magic is 0x6268. CRC is the native u-boot crc32.

Signed-off-by: Oliver St√§bler <oliver.staebler@bytesatwork.ch>
---
 board/bytesatwork/am335x/Makefile                  |   6 +
 board/bytesatwork/am335x/board.c                   |  48 ------
 board/bytesatwork/am335x/m2config/README           |  37 ++++
 board/bytesatwork/am335x/m2config/cmd_m2config.c   | 191 +++++++++++++++++++++
 board/bytesatwork/am335x/m2config/m2config.c       |  35 ++++
 board/bytesatwork/am335x/m2config/m2config.h       |  67 ++++++++
 .../bytesatwork/am335x/m2config/m2config_builtin.c |  17 ++
 .../bytesatwork/am335x/m2config/m2config_builtin.h |  23 +++
 .../bytesatwork/am335x/m2config/m2config_eeprom.c  | 114 ++++++++++++
 .../bytesatwork/am335x/m2config/m2config_eeprom.h  |  38 ++++
 board/bytesatwork/am335x/m2config/m2config_get.c   |  22 +++
 board/bytesatwork/am335x/m2config/m2config_get.h   |  15 ++
 board/bytesatwork/am335x/ram.c                     | 179 +++++++++++++++++++
 include/configs/am335x_m2.h                        |   9 +
 14 files changed, 753 insertions(+), 48 deletions(-)
 create mode 100644 board/bytesatwork/am335x/m2config/README
 create mode 100644 board/bytesatwork/am335x/m2config/cmd_m2config.c
 create mode 100644 board/bytesatwork/am335x/m2config/m2config.c
 create mode 100644 board/bytesatwork/am335x/m2config/m2config.h
 create mode 100644 board/bytesatwork/am335x/m2config/m2config_builtin.c
 create mode 100644 board/bytesatwork/am335x/m2config/m2config_builtin.h
 create mode 100644 board/bytesatwork/am335x/m2config/m2config_eeprom.c
 create mode 100644 board/bytesatwork/am335x/m2config/m2config_eeprom.h
 create mode 100644 board/bytesatwork/am335x/m2config/m2config_get.c
 create mode 100644 board/bytesatwork/am335x/m2config/m2config_get.h
 create mode 100644 board/bytesatwork/am335x/ram.c

diff --git a/board/bytesatwork/am335x/Makefile b/board/bytesatwork/am335x/Makefile
index 313008f..4b9fe7a 100644
--- a/board/bytesatwork/am335x/Makefile
+++ b/board/bytesatwork/am335x/Makefile
@@ -11,6 +11,12 @@
 
 ifeq ($(CONFIG_SKIP_LOWLEVEL_INIT),)
 obj-y	:= mux.o
+obj-y	+= ram.o
 endif
 
 obj-y	+= board.o
+obj-y	+= m2config/m2config.o
+obj-y	+= m2config/m2config_get.o
+obj-$(CONFIG_M2CONFIG_EEPROM)	+= m2config/m2config_eeprom.o
+obj-$(CONFIG_M2CONFIG_BUILTIN)	+= m2config/m2config_builtin.o
+obj-$(CONFIG_CMD_M2CONFIG)	+= m2config/cmd_m2config.o
diff --git a/board/bytesatwork/am335x/board.c b/board/bytesatwork/am335x/board.c
index c285199..853b481 100644
--- a/board/bytesatwork/am335x/board.c
+++ b/board/bytesatwork/am335x/board.c
@@ -17,7 +17,6 @@
 #include <asm/arch/cpu.h>
 #include <asm/arch/hardware.h>
 #include <asm/arch/omap.h>
-#include <asm/arch/ddr_defs.h>
 #include <asm/arch/clock.h>
 #include <asm/arch/mmc_host_def.h>
 #include <asm/arch/sys_proto.h>
@@ -39,28 +38,6 @@ DECLARE_GLOBAL_DATA_PTR;
 static struct ctrl_dev *cdev = (struct ctrl_dev *)CTRL_DEVICE_BASE;
 
 #ifndef CONFIG_SKIP_LOWLEVEL_INIT
-static const struct ddr_data ddr2_data = {
-	.datardsratio0 = MT47H128M16RT25E_RD_DQS,
-	.datafwsratio0 = MT47H128M16RT25E_PHY_FIFO_WE,
-	.datawrsratio0 = MT47H128M16RT25E_PHY_WR_DATA,
-};
-
-static const struct cmd_control ddr2_cmd_ctrl_data = {
-	.cmd0csratio = MT47H128M16RT25E_RATIO,
-
-	.cmd1csratio = MT47H128M16RT25E_RATIO,
-
-	.cmd2csratio = MT47H128M16RT25E_RATIO,
-};
-
-static const struct emif_regs ddr2_emif_reg_data = {
-	.sdram_config = MT47H128M16RT25E_EMIF_SDCFG,
-	.ref_ctrl = MT47H128M16RT25E_EMIF_SDREF,
-	.sdram_tim1 = MT47H128M16RT25E_EMIF_TIM1,
-	.sdram_tim2 = MT47H128M16RT25E_EMIF_TIM2,
-	.sdram_tim3 = MT47H128M16RT25E_EMIF_TIM3,
-	.emif_ddr_phy_ctlr_1 = MT47H128M16RT25E_EMIF_READ_LATENCY,
-};
 
 #ifdef CONFIG_SPL_OS_BOOT
 int spl_start_uboot(void)
@@ -80,10 +57,6 @@ int spl_start_uboot(void)
 }
 #endif
 
-#define OSC	(V_OSCK/1000000)
-const struct dpll_params dpll_ddr = {
-		266, OSC-1, 1, -1, -1, -1, -1};
-
 void am33xx_spl_board_init(void)
 {
 	int mpu_vdd;
@@ -118,14 +91,6 @@ void am33xx_spl_board_init(void)
 	do_setup_dpll(&dpll_mpu_regs, &dpll_mpu_opp100);
 }
 
-const struct dpll_params *get_dpll_ddr_params(void)
-{
-	enable_i2c0_pin_mux();
-	i2c_init(CONFIG_SYS_OMAP24_I2C_SPEED, CONFIG_SYS_OMAP24_I2C_SLAVE);
-
-	return &dpll_ddr;
-}
-
 void set_uart_mux_conf(void)
 {
 #ifdef CONFIG_SERIAL1
@@ -153,19 +118,6 @@ void set_mux_conf_regs(void)
 	enable_board_pin_mux();
 }
 
-const struct ctrl_ioregs ioregs = {
-	.cm0ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
-	.cm1ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
-	.cm2ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
-	.dt0ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
-	.dt1ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
-};
-
-void sdram_init(void)
-{
-	config_ddr(266, &ioregs, &ddr2_data, &ddr2_cmd_ctrl_data,
-			&ddr2_emif_reg_data, 0);
-}
 #endif
 
 /*
diff --git a/board/bytesatwork/am335x/m2config/README b/board/bytesatwork/am335x/m2config/README
new file mode 100644
index 0000000..fa20ad7
--- /dev/null
+++ b/board/bytesatwork/am335x/m2config/README
@@ -0,0 +1,37 @@
+
+Configuration options:
+
+CONFIG_CMD_M2CONFIG
+If defined, add the u-boot command m2config to read and write the configuration.
+
+CONFIG_M2CONFIG_EEPROM
+If defined, add method to read (SPL) and write (SPL and u-boot) the
+configuration from the eeprom.
+
+CONFIG_M2CONFIG_BUILTIN
+If defined, add built-in configuration values. Define the following names:
+  CONFIG_M2CONFIG_BUILTIN_PCB
+  CONFIG_M2CONFIG_BUILTIN_RAM
+  CONFIG_M2CONFIG_BUILTIN_FLASH
+
+If both CONFIG_M2CONFIG_EEPROM and CONFIG_M2CONFIG_BUILTIN are defined, the
+order is defined in m2config_get.
+
+At least one of CONFIG_M2CONFIG_EEPROM or CONFIG_M2CONFIG_BUILTIN has to be
+defined.
+
+
+
+EEPROM format
+
+Byte order is the native byte order of the CPU. The format is:
+
+Bytes  Usage
+  2    Magic
+  2    length
+  4    PCB
+  4    RAM
+  4    Flash
+  4    CRC
+
+Magic is 0x6268. CRC is the native u-boot crc32.
diff --git a/board/bytesatwork/am335x/m2config/cmd_m2config.c b/board/bytesatwork/am335x/m2config/cmd_m2config.c
new file mode 100644
index 0000000..8a4b98f
--- /dev/null
+++ b/board/bytesatwork/am335x/m2config/cmd_m2config.c
@@ -0,0 +1,191 @@
+/*
+ * (C) Copyright 2015
+ * bytes at work AG
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <command.h>
+#include <post.h>
+#include "m2config_builtin.h"
+#include "m2config_eeprom.h"
+
+static void print_config(const struct m2config *config)
+{
+	printf("PCB:   %u (%s)\n", config->pcb, m2config_get_pcb_name(config->pcb));
+	printf("RAM:   %u (%s)\n", config->ram, m2config_get_ram_name(config->ram));
+	printf("Flash: %u (%s)\n", config->flash, m2config_get_flash_name(config->flash));
+}
+
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+static enum command_ret_t cmd_builtin(int argc, char * const argv[])
+{
+	if (argc != 0)
+		return CMD_RET_USAGE;
+
+	struct m2config config;
+
+	if (m2config_builtin(&config) != 0) {
+		printf ("could not get built-in configuration\n");
+		return CMD_RET_FAILURE;
+	}
+
+	print_config(&config);
+
+	return CMD_RET_SUCCESS;
+}
+#endif
+
+#if defined(CONFIG_M2CONFIG_EEPROM)
+static enum command_ret_t cmd_read(int argc, char * const argv[])
+{
+	if (argc != 0)
+		return CMD_RET_USAGE;
+
+	struct m2config config;
+
+	if (m2config_eeprom_read(&config) != 0)
+		printf ("no configuration in eeprom\n");
+	else
+		print_config(&config);
+
+	return CMD_RET_SUCCESS;
+}
+
+static enum command_ret_t cmd_write(int argc, char * const argv[])
+{
+	if (argc != 3)
+		return CMD_RET_USAGE;
+
+	struct m2config config;
+	config.pcb = simple_strtoul(argv[0], NULL, 10);
+	config.ram = simple_strtoul(argv[1], NULL, 10);
+	config.flash = simple_strtoul(argv[2], NULL, 10);
+
+	if (m2config_eeprom_write(&config) != 0) {
+		printf ("could not write to EEPROM\n");
+		return CMD_RET_FAILURE;
+	}
+
+	return CMD_RET_SUCCESS;
+}
+
+static enum command_ret_t cmd_erase(int argc, char * const argv[])
+{
+	if (argc != 0)
+		return CMD_RET_USAGE;
+
+	if (m2config_eeprom_erase() != 0) {
+		printf ("could not erase configuration\n");
+		return CMD_RET_FAILURE;
+	}
+
+	return CMD_RET_SUCCESS;
+}
+
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+static enum command_ret_t cmd_builtin2eeprom(int argc, char * const argv[])
+{
+	if (argc != 0)
+		return CMD_RET_USAGE;
+
+	struct m2config config;
+
+	if (m2config_builtin(&config) != 0) {
+		printf ("could not get built-in configuration\n");
+		return CMD_RET_FAILURE;
+	}
+
+	if (m2config_eeprom_write(&config) != 0) {
+		printf ("could not write to EEPROM\n");
+		return CMD_RET_FAILURE;
+	}
+
+	return CMD_RET_SUCCESS;
+}
+#endif
+#endif
+
+struct m2config_cmd_struct {
+		char  *name;
+		enum command_ret_t (*func)(int argc, char * const argv[]);
+};
+
+static const struct m2config_cmd_struct m2config_cmd[] = {
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+	{ "builtin", cmd_builtin },
+#endif
+#if defined(CONFIG_M2CONFIG_EEPROM)
+	{ "read", cmd_read },
+	{ "erase", cmd_erase },
+	{ "write", cmd_write },
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+	{ "builtin2eeprom", cmd_builtin2eeprom },
+#endif
+#endif
+	{ NULL, NULL }
+};
+
+static const struct m2config_cmd_struct *findCmd(const char *name)
+{
+	const struct m2config_cmd_struct *cmd;
+
+	for (cmd = m2config_cmd; cmd->name != NULL; cmd++)
+		if (strcmp (name, cmd->name) == 0)
+			return cmd;
+
+	return NULL;
+}
+
+static void print_config_names(const struct m2config_name_pair *map)
+{
+	const struct m2config_name_pair *itr;
+
+	for (itr = map; itr->name != NULL; itr++)
+		printf("  %u (%s)\n", itr->config, itr->name);
+}
+
+static enum command_ret_t print_configurations(void)
+{
+	printf("PCB:\n");
+	print_config_names(m2config_pcb_name);
+	printf("RAM:\n");
+	print_config_names(m2config_ram_name);
+	printf("Flash:\n");
+	print_config_names(m2config_flash_name);
+
+	return CMD_RET_SUCCESS;
+}
+
+enum command_ret_t do_m2config (cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
+{
+	if (argc >= 2) {
+		const struct m2config_cmd_struct *cmd = findCmd(argv[1]);
+		if (cmd != NULL)
+			return cmd->func(argc-2, &argv[2]);
+		else
+			return CMD_RET_USAGE;
+	}
+
+	return print_configurations();
+}
+
+U_BOOT_CMD(
+	m2config, 5, 0, do_m2config,
+	"perform m2 configuration",
+	"- list known configuration values\n"
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+	"builtin  - print built-in configuration from u-boot\n"
+#endif
+#if defined(CONFIG_M2CONFIG_EEPROM)
+	"read     - read configuration from EEPROM\n"
+	"erase    - erase configuration from EEPROM\n"
+	"write <PCB> <RAM> <Flash>\n"
+	"         - write configuration to EEPROM\n"
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+	"builtin2eeprom\n"
+	"         - write built-in configuration to EEPROM\n"
+#endif
+#endif
+);
diff --git a/board/bytesatwork/am335x/m2config/m2config.c b/board/bytesatwork/am335x/m2config/m2config.c
new file mode 100644
index 0000000..f89721c
--- /dev/null
+++ b/board/bytesatwork/am335x/m2config/m2config.c
@@ -0,0 +1,35 @@
+/*
+ * (C) Copyright 2015
+ * bytes at work AG
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include "m2config.h"
+
+const struct m2config_name_pair m2config_pcb_name[] = {
+	{ M2_PCB_REV_00, "Rev.00" },
+	{ -1, NULL },
+};
+
+const struct m2config_name_pair m2config_ram_name[] = {
+	{ M2_RAM_MT47H128M16RT25E, "MT47H128M16RT25E" },
+	{ M2_RAM_K4B2G1646EBIH9,   "K4B2G1646EBIH9" },
+	{ -1, NULL },
+};
+
+const struct m2config_name_pair m2config_flash_name[] = {
+	{ M2_FLASH_2GBIT, "2 GBit" },
+	{ -1, NULL },
+};
+
+const char *m2config_get_name(uint32_t config, const struct m2config_name_pair *map)
+{
+	const struct m2config_name_pair *itr;
+
+	for (itr = map; itr->name != NULL; itr++)
+		if (itr->config == config)
+			return itr->name;
+
+	return "unknown";
+}
diff --git a/board/bytesatwork/am335x/m2config/m2config.h b/board/bytesatwork/am335x/m2config/m2config.h
new file mode 100644
index 0000000..e7a4545
--- /dev/null
+++ b/board/bytesatwork/am335x/m2config/m2config.h
@@ -0,0 +1,67 @@
+/*
+ * (C) Copyright 2015
+ * bytes at work AG
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef M2CONFIG_H
+#define M2CONFIG_H
+
+#include <config.h>
+#include <linux/types.h>
+
+#if !defined(CONFIG_M2CONFIG_BUILTIN) && !defined(CONFIG_M2CONFIG_EEPROM)
+#error No configuration defined. Please define CONFIG_M2CONFIG_EEPROM or/and CONFIG_M2CONFIG_BUILTIN
+#endif
+
+
+typedef enum
+{
+	M2_PCB_REV_00 = 0,
+} m2config_pcb_t;
+
+typedef enum
+{
+	M2_RAM_MT47H128M16RT25E = 1,
+	M2_RAM_K4B2G1646EBIH9 = 2,
+} m2config_ram_t;
+
+typedef enum
+{
+	M2_FLASH_2GBIT = 0,
+} m2config_flash_t;
+
+struct m2config {
+	m2config_pcb_t		pcb;
+	m2config_ram_t		ram;
+	m2config_flash_t	flash;
+};
+
+struct m2config_name_pair {
+	uint32_t	config;
+	const char	*name;
+};
+
+extern const struct m2config_name_pair m2config_pcb_name[];
+extern const struct m2config_name_pair m2config_ram_name[];
+extern const struct m2config_name_pair m2config_flash_name[];
+
+const char *m2config_get_name(uint32_t config, const struct m2config_name_pair *map);
+
+static inline const char *m2config_get_pcb_name(m2config_pcb_t config)
+{
+	return m2config_get_name(config, m2config_pcb_name);
+}
+
+static inline const char *m2config_get_ram_name(m2config_ram_t config)
+{
+	return m2config_get_name(config, m2config_ram_name);
+}
+
+static inline const char *m2config_get_flash_name(m2config_flash_t config)
+{
+	return m2config_get_name(config, m2config_flash_name);
+}
+
+#endif
diff --git a/board/bytesatwork/am335x/m2config/m2config_builtin.c b/board/bytesatwork/am335x/m2config/m2config_builtin.c
new file mode 100644
index 0000000..2269bc4
--- /dev/null
+++ b/board/bytesatwork/am335x/m2config/m2config_builtin.c
@@ -0,0 +1,17 @@
+/*
+ * (C) Copyright 2015
+ * bytes at work AG
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include "m2config.h"
+#include <config.h>
+
+int m2config_builtin(struct m2config *config)
+{
+	config->pcb    = CONFIG_M2CONFIG_BUILTIN_PCB;
+	config->ram    = CONFIG_M2CONFIG_BUILTIN_RAM;
+	config->flash  = CONFIG_M2CONFIG_BUILTIN_FLASH;
+	return 0;
+}
diff --git a/board/bytesatwork/am335x/m2config/m2config_builtin.h b/board/bytesatwork/am335x/m2config/m2config_builtin.h
new file mode 100644
index 0000000..19bb420
--- /dev/null
+++ b/board/bytesatwork/am335x/m2config/m2config_builtin.h
@@ -0,0 +1,23 @@
+/*
+ * (C) Copyright 2015
+ * bytes at work AG
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef M2CONFIG_BUILTIN_H
+#define M2CONFIG_BUILTIN_H
+
+#include "m2config.h"
+#include <config.h>
+
+#if defined(CONFIG_M2CONFIG_BUILTIN)
+int m2config_builtin(struct m2config *config);
+#else
+static inline int m2config_builtin(struct m2config *config)
+{
+	return -1;
+}
+#endif
+
+#endif
diff --git a/board/bytesatwork/am335x/m2config/m2config_eeprom.c b/board/bytesatwork/am335x/m2config/m2config_eeprom.c
new file mode 100644
index 0000000..75701c7
--- /dev/null
+++ b/board/bytesatwork/am335x/m2config/m2config_eeprom.c
@@ -0,0 +1,114 @@
+/*
+ * (C) Copyright 2015
+ * bytes at work AG
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include "m2config_eeprom.h"
+
+#include "m2config.h"
+
+#include <common.h>
+#include <i2c.h>
+
+#define EEPROM_ADDRESS	0x50
+#define MAGIC  0x6268
+
+typedef uint8_t address_t; //TODO: according to the datasheet, this should be 2 bytes
+
+struct eeprom_header
+{
+	uint16_t magic;
+	uint16_t length;
+} __attribute__ ((packed));
+
+struct eeprom_content
+{
+	uint32_t	pcb;
+	uint32_t	ram;
+	uint32_t	flash;
+} __attribute__ ((packed));
+
+struct eeprom_data
+{
+	struct eeprom_header	header;
+	struct eeprom_content	content;
+	uint32_t		crc;
+} __attribute__ ((packed));
+
+struct eeprom_write_frame
+{
+	address_t            address;
+	struct eeprom_data   content;
+} __attribute__ ((packed));
+
+
+static uint8_t crc(const struct eeprom_content *config)
+{
+	return crc32(0, (uint8_t*)config, sizeof(*config));
+}
+
+int m2config_eeprom_read(struct m2config *config)
+{
+	address_t address = 0;
+	struct eeprom_data   content;
+
+	if (i2c_write(EEPROM_ADDRESS, 0, 1, (u8 *)&address, sizeof(address)) != 0)
+		return -2;
+
+	udelay(5);
+
+	if (i2c_read(EEPROM_ADDRESS, 0, 1, (u8 *)&content, sizeof(content)) != 0)
+		return -3;
+
+	if (content.header.magic != MAGIC)
+		return -4;
+
+	if (content.header.length != sizeof(content.content))
+		return -5;
+
+	if (content.crc != crc(&content.content))
+		return -6;
+
+	config->pcb    = content.content.pcb;
+	config->ram    = content.content.ram;
+	config->flash  = content.content.flash;
+
+	return 0;
+}
+
+#if defined(CONFIG_SKIP_LOWLEVEL_INIT)
+
+int m2config_eeprom_write(struct m2config *config)
+{
+	struct eeprom_write_frame   frame;
+
+	frame.address = 0;
+	frame.content.header.magic = MAGIC;
+	frame.content.header.length = sizeof(frame.content.content);
+	frame.content.content.pcb = config->pcb;
+	frame.content.content.ram = config->ram;
+	frame.content.content.flash = config->flash;
+	frame.content.crc = crc(&frame.content.content);
+
+	if (i2c_write(EEPROM_ADDRESS, 0, 1, (u8 *)&frame, sizeof(frame)) != 0)
+		return -7;
+
+	return 0;
+}
+
+int m2config_eeprom_erase(void)
+{
+	struct eeprom_write_frame   frame;
+
+	memset(&frame, 0xff, sizeof(frame));
+	frame.address = 0;
+
+	if (i2c_write(EEPROM_ADDRESS, 0, 1, (u8 *)&frame, sizeof(frame)) != 0)
+		return -8;
+
+	return 0;
+}
+
+#endif
diff --git a/board/bytesatwork/am335x/m2config/m2config_eeprom.h b/board/bytesatwork/am335x/m2config/m2config_eeprom.h
new file mode 100644
index 0000000..7bcba7d
--- /dev/null
+++ b/board/bytesatwork/am335x/m2config/m2config_eeprom.h
@@ -0,0 +1,38 @@
+/*
+ * (C) Copyright 2015
+ * bytes at work AG
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef M2CONFIG_EEPROM_H
+#define M2CONFIG_EEPROM_H
+
+#include "m2config.h"
+#include <config.h>
+
+#if defined(CONFIG_M2CONFIG_EEPROM)
+int m2config_eeprom_read(struct m2config *config);
+#else
+static inline int m2config_eeprom_read(struct m2config *config)
+{
+	return -1;
+}
+#endif
+
+#if defined(CONFIG_M2CONFIG_EEPROM) && defined(CONFIG_SKIP_LOWLEVEL_INIT)
+int m2config_eeprom_write(struct m2config *config);
+int m2config_eeprom_erase(void);
+#else
+static inline int m2config_eeprom_write(struct m2config *config)
+{
+	return -1;
+}
+
+static inline int m2config_eeprom_erase(void)
+{
+	return -1;
+}
+#endif
+
+#endif
diff --git a/board/bytesatwork/am335x/m2config/m2config_get.c b/board/bytesatwork/am335x/m2config/m2config_get.c
new file mode 100644
index 0000000..ef7515d
--- /dev/null
+++ b/board/bytesatwork/am335x/m2config/m2config_get.c
@@ -0,0 +1,22 @@
+/*
+ * (C) Copyright 2015
+ * bytes at work AG
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include "m2config_get.h"
+
+#include "m2config_builtin.h"
+#include "m2config_eeprom.h"
+
+int m2config_get(struct m2config *config)
+{
+	if (m2config_builtin(config) == 0)
+		return 0;
+
+	if (m2config_eeprom_read(config) == 0)
+		return 0;
+
+	return -1;
+}
diff --git a/board/bytesatwork/am335x/m2config/m2config_get.h b/board/bytesatwork/am335x/m2config/m2config_get.h
new file mode 100644
index 0000000..f4eb56b
--- /dev/null
+++ b/board/bytesatwork/am335x/m2config/m2config_get.h
@@ -0,0 +1,15 @@
+/*
+ * (C) Copyright 2015
+ * bytes at work AG
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef M2CONFIG_GET_H
+#define M2CONFIG_GET_H
+
+#include "m2config.h"
+
+int m2config_get(struct m2config *config);
+
+#endif
diff --git a/board/bytesatwork/am335x/ram.c b/board/bytesatwork/am335x/ram.c
new file mode 100644
index 0000000..15414fc
--- /dev/null
+++ b/board/bytesatwork/am335x/ram.c
@@ -0,0 +1,179 @@
+/*
+ * RAM initialization for ByteEngine M2
+ *
+ * Copyright (C) 2015 bytes at work AG
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <asm/arch/ddr_defs.h>
+#include <asm/arch-am33xx/clock.h>
+#include <i2c.h>
+#include <config.h>
+#include "board.h"
+#include "m2config/m2config.h"
+#include "m2config/m2config_get.h"
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define OSC	(V_OSCK/1000000)
+
+
+
+static const struct ctrl_ioregs MT47H128M16RT25E_ctrl_ioregs = {
+	.cm0ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
+	.cm1ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
+	.cm2ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
+	.dt0ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
+	.dt1ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
+};
+
+static const struct ddr_data MT47H128M16RT25E_ddr_data = {
+	.datardsratio0		= MT47H128M16RT25E_RD_DQS,
+	.datafwsratio0		= MT47H128M16RT25E_PHY_FIFO_WE,
+	.datawrsratio0		= MT47H128M16RT25E_PHY_WR_DATA,
+};
+
+static const struct cmd_control MT47H128M16RT25E_cmd_control = {
+	.cmd0csratio		= MT47H128M16RT25E_RATIO,
+	.cmd1csratio		= MT47H128M16RT25E_RATIO,
+	.cmd2csratio		= MT47H128M16RT25E_RATIO,
+};
+
+static const struct emif_regs MT47H128M16RT25E_emif_regs = {
+	.sdram_config		= MT47H128M16RT25E_EMIF_SDCFG,
+	.ref_ctrl		= MT47H128M16RT25E_EMIF_SDREF,
+	.sdram_tim1		= MT47H128M16RT25E_EMIF_TIM1,
+	.sdram_tim2		= MT47H128M16RT25E_EMIF_TIM2,
+	.sdram_tim3		= MT47H128M16RT25E_EMIF_TIM3,
+	.emif_ddr_phy_ctlr_1	= MT47H128M16RT25E_EMIF_READ_LATENCY,
+};
+
+#define MT47H128M16RT25E_CLOCK_MHZ	266
+
+static void init_MT47H128M16RT25E(void)
+{
+	config_ddr(MT47H128M16RT25E_CLOCK_MHZ,
+		&MT47H128M16RT25E_ctrl_ioregs,
+		&MT47H128M16RT25E_ddr_data,
+		&MT47H128M16RT25E_cmd_control,
+		&MT47H128M16RT25E_emif_regs,
+		0);
+}
+
+static const struct dpll_params MT47H128M16RT25E_dpll = {
+	MT47H128M16RT25E_CLOCK_MHZ, OSC-1,
+	1, -1, -1, -1, -1
+};
+
+
+
+static const struct ctrl_ioregs K4B2G1646EBIH9_ctrl_ioregs = {
+	.cm0ioctl               = K4B2G1646EBIH9_IOCTRL_VALUE,
+	.cm1ioctl               = K4B2G1646EBIH9_IOCTRL_VALUE,
+	.cm2ioctl               = K4B2G1646EBIH9_IOCTRL_VALUE,
+	.dt0ioctl               = K4B2G1646EBIH9_IOCTRL_VALUE,
+	.dt1ioctl               = K4B2G1646EBIH9_IOCTRL_VALUE,
+};
+
+static const struct ddr_data K4B2G1646EBIH9_ddr_data = {
+	.datardsratio0		= K4B2G1646EBIH9_RD_DQS,
+	.datawdsratio0		= K4B2G1646EBIH9_WR_DQS,
+	.datafwsratio0		= K4B2G1646EBIH9_PHY_FIFO_WE,
+	.datawrsratio0		= K4B2G1646EBIH9_PHY_WR_DATA,
+};
+
+static const struct cmd_control K4B2G1646EBIH9_cmd_control = {
+	.cmd0csratio		= K4B2G1646EBIH9_RATIO,
+	.cmd0iclkout		= K4B2G1646EBIH9_INVERT_CLKOUT,
+
+	.cmd1csratio		= K4B2G1646EBIH9_RATIO,
+	.cmd1iclkout		= K4B2G1646EBIH9_INVERT_CLKOUT,
+
+	.cmd2csratio		= K4B2G1646EBIH9_RATIO,
+	.cmd2iclkout		= K4B2G1646EBIH9_INVERT_CLKOUT,
+};
+
+static const struct emif_regs K4B2G1646EBIH9_emif_regs = {
+	.sdram_config		= K4B2G1646EBIH9_EMIF_SDCFG,
+	.ref_ctrl		= K4B2G1646EBIH9_EMIF_SDREF,
+	.sdram_tim1		= K4B2G1646EBIH9_EMIF_TIM1,
+	.sdram_tim2		= K4B2G1646EBIH9_EMIF_TIM2,
+	.sdram_tim3		= K4B2G1646EBIH9_EMIF_TIM3,
+	.zq_config		= K4B2G1646EBIH9_ZQ_CFG,
+	.emif_ddr_phy_ctlr_1	= K4B2G1646EBIH9_EMIF_READ_LATENCY,
+};
+
+#define K4B2G1646EBIH9_CLOCK_MHZ	333
+
+static void init_K4B2G1646EBIH9(void)
+{
+	config_ddr(K4B2G1646EBIH9_CLOCK_MHZ,
+		&K4B2G1646EBIH9_ctrl_ioregs,
+		&K4B2G1646EBIH9_ddr_data,
+		&K4B2G1646EBIH9_cmd_control,
+		&K4B2G1646EBIH9_emif_regs,
+		0);
+
+	mdelay(2);
+}
+
+static const struct dpll_params K4B2G1646EBIH9_dpll = {
+	K4B2G1646EBIH9_CLOCK_MHZ, OSC-1,
+	1, -1, -1, -1, -1
+};
+
+
+
+struct ram_config {
+	m2config_ram_t	config;
+	void (*init)(void);
+	const struct dpll_params *dpll_param;
+};
+
+const struct ram_config ram_init_map[] = {
+	{ M2_RAM_MT47H128M16RT25E, init_MT47H128M16RT25E, &MT47H128M16RT25E_dpll },
+	{ M2_RAM_K4B2G1646EBIH9,   init_K4B2G1646EBIH9,   &K4B2G1646EBIH9_dpll },
+	{ -1, NULL }
+};
+
+static const struct ram_config *findRam(m2config_ram_t config)
+{
+	const struct ram_config *itr;
+	for (itr = ram_init_map; itr->init != NULL; itr++)
+		if (itr->config == config)
+			return itr;
+
+	return NULL;
+}
+
+static const struct ram_config *getRam(void)
+{
+	const struct ram_config *ram = NULL;
+
+	struct m2config config;
+	if (m2config_get(&config) == 0)
+		ram = findRam(config.ram);
+
+	if (ram == NULL)
+		ram = &ram_init_map[0];
+
+	return ram;
+}
+
+
+void sdram_init(void)
+{
+	const struct ram_config *ram = getRam();
+	printf("use ram configuration %u (%s)\n", ram->config, m2config_get_ram_name(ram->config));
+	ram->init();
+}
+
+const struct dpll_params *get_dpll_ddr_params(void)
+{
+	enable_i2c0_pin_mux();
+	i2c_init(CONFIG_SYS_OMAP24_I2C_SPEED, CONFIG_SYS_OMAP24_I2C_SLAVE);
+
+	const struct ram_config *ram = getRam();
+	return ram->dpll_param;
+}
diff --git a/include/configs/am335x_m2.h b/include/configs/am335x_m2.h
index 596e395..1aac7f8 100644
--- a/include/configs/am335x_m2.h
+++ b/include/configs/am335x_m2.h
@@ -118,6 +118,15 @@
 
 #define CONFIG_CMD_ECHO
 
+#define CONFIG_CMD_M2CONFIG
+#define CONFIG_M2CONFIG_EEPROM
+#ifndef CONFIG_SPL_BUILD
+#define CONFIG_M2CONFIG_BUILTIN
+#define CONFIG_M2CONFIG_BUILTIN_PCB	M2_PCB_REV_00
+#define CONFIG_M2CONFIG_BUILTIN_RAM	M2_RAM_MT47H128M16RT25E
+#define CONFIG_M2CONFIG_BUILTIN_FLASH	M2_FLASH_2GBIT
+#endif
+
 /* We set the max number of command args high to avoid HUSH bugs. */
 #define CONFIG_SYS_MAXARGS		64
 
-- 
2.1.4

